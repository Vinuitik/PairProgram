#BlueJ class context
comment0.target=Field
comment0.text=\r\n\ Represent\ a\ rectangular\ grid\ of\ field\ positions.\r\n\ Each\ position\ stores\ an\ Animal\r\n\r\n\ @author\ David\ J.\ Barnes,\ Michael\ K\u00F6lling\ &\ Jeffery\ Raphael\r\n\ @version\ 2022.01.06\r\n
comment1.params=depth\ width
comment1.target=Field(int,\ int)
comment1.text=\r\n\ Represent\ a\ field\ of\ the\ given\ dimensions.\r\n\ @param\ depth\ The\ depth\ of\ the\ field.\r\n\ @param\ width\ The\ width\ of\ the\ field.\r\n
comment10.params=row\ col
comment10.target=Plant\ getPlantAt(int,\ int)
comment10.text=\r\n\ Similar\ to\ the\ method\ above,\ but\ this\ focuses\ on\ the\ existance\ of\ plants\ \r\n\ Returns\ the\ plant\ at\ a\ given\ location\ \r\n
comment11.params=location
comment11.target=Location\ randomAdjacentLocation(Location)
comment11.text=\r\n\ Generate\ a\ random\ location\ that\ is\ adjacent\ to\ the\r\n\ given\ location,\ or\ is\ the\ same\ location.\r\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\r\n\ of\ the\ field.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\r\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\r\n
comment12.params=location
comment12.target=java.util.List\ adjacentLocations(Location)
comment12.text=\r\n\ Return\ a\ shuffled\ list\ of\ locations\ adjacent\ to\ the\ given\ one.\r\n\ The\ list\ will\ not\ include\ the\ location\ itself.\r\n\ All\ locations\ will\ lie\ within\ the\ grid.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\r\n\ @return\ A\ list\ of\ locations\ adjacent\ to\ that\ given.\r\n
comment13.params=location
comment13.target=java.util.List\ getLivingNeighbours(Location)
comment13.text=\r\n\ Get\ a\ shuffled\ list\ of\ living\ neighbours\r\n\ @param\ location\ Get\ locations\ adjacent\ to\ this.\r\n\ @return\ A\ list\ of\ living\ neighbours\r\n
comment14.params=
comment14.target=int\ getDepth()
comment14.text=\r\n\ Return\ the\ depth\ of\ the\ field.\r\n\ @return\ The\ depth\ of\ the\ field.\r\n
comment15.params=
comment15.target=int\ getWidth()
comment15.text=\r\n\ Return\ the\ width\ of\ the\ field.\r\n\ @return\ The\ width\ of\ the\ field.\r\n
comment16.params=location
comment16.target=java.util.List\ getFreeAdjacentLocations(Location)
comment16.text=\r\n\ Get\ a\ shuffled\ list\ of\ the\ free\ adjacent\ locations.\r\n\ @param\ location\ Get\ locations\ adjacent\ to\ this.\r\n\ @return\ A\ list\ of\ free\ adjacent\ locations.\r\n
comment17.params=location
comment17.target=Location\ getFreeAdjacentLocation(Location)
comment17.text=\r\n\ Try\ to\ find\ a\ free\ location\ that\ is\ adjacent\ to\ the\r\n\ given\ location.\ If\ there\ is\ none,\ return\ null.\r\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\r\n\ of\ the\ field.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\r\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\r\n
comment18.params=
comment18.target=int\ totalSquares()
comment2.params=
comment2.target=void\ clear()
comment2.text=\r\n\ Empty\ the\ field.\r\n
comment3.params=location
comment3.target=void\ clear(Location)
comment3.text=\r\n\ Clear\ the\ given\ location.\r\n\ @param\ location\ The\ location\ to\ clear.\r\n
comment4.params=animal\ row\ col
comment4.target=void\ place(Animal,\ int,\ int)
comment4.text=\r\n\ Place\ an\ animal\ at\ the\ given\ location.\r\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\ be\ lost.\r\n\ @param\ animal\ The\ animal\ to\ be\ placed.\r\n\ @param\ row\ Row\ coordinate\ of\ the\ location.\r\n\ @param\ col\ Column\ coordinate\ of\ the\ location.\r\n
comment5.params=animal\ location
comment5.target=void\ place(Animal,\ Location)
comment5.text=\r\n\ Place\ an\ animal\ at\ the\ given\ location.\r\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\ be\ lost.\r\n\ @param\ animal\ The\ animal\ to\ be\ placed.\r\n\ @param\ location\ Where\ to\ place\ the\ animal.\r\n
comment6.params=plant\ location
comment6.target=void\ placePlant(Plant,\ Location)
comment6.text=\r\n\ Places\ a\ plant\ at\ any\ free\ location\ initally\ \r\n\ When\ an\ animal\ moves\ from\ where\ they\ spawned\ there\ will\ be\ no\ plant\ there\r\n\ When\ aniamls\ die,\ their\ 'death\ tile'\ will\ be\ replaced\ with\ a\ plant\ tile\r\n\ Plant\ tiles\ are\ considered\ free\ tiles\r\n
comment7.params=location
comment7.target=boolean\ isPlantAt(Location)
comment7.text=\r\n\ Returns\ a\ boolean\ if\ the\ tile\ has\ a\ plant\ there\r\n
comment8.params=location
comment8.target=java.lang.Object\ getObjectAt(Location)
comment8.text=\r\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\r\n\ Otherwise,\ check\ if\ the\ tile\ is\ occupied\ by\ a\ plant\r\n\ @param\ location\ Where\ in\ the\ field.\r\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment9.params=row\ col
comment9.target=Animal\ getObjectAt(int,\ int)
comment9.text=\r\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ row\ The\ desired\ row.\r\n\ @param\ col\ The\ desired\ column.\r\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
numComments=19
